//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeeatherReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WeatherService.WeatherVM", Namespace="http://schemas.datacontract.org/2004/07/WeatherService")]
    public partial class WeatherServiceWeatherVM : object
    {
        
        private WeeatherReference.City CityField;
        
        private string Image64Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WeeatherReference.City City
        {
            get
            {
                return this.CityField;
            }
            set
            {
                this.CityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image64
        {
            get
            {
                return this.Image64Field;
            }
            set
            {
                this.Image64Field = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="City", Namespace="http://schemas.datacontract.org/2004/07/WeatherService")]
    public partial class City : object
    {
        
        private string ConditionField;
        
        private double DegreeField;
        
        private int IdField;
        
        private int ImageIdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Condition
        {
            get
            {
                return this.ConditionField;
            }
            set
            {
                this.ConditionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Degree
        {
            get
            {
                return this.DegreeField;
            }
            set
            {
                this.DegreeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageId
        {
            get
            {
                return this.ImageIdField;
            }
            set
            {
                this.ImageIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeeatherReference.IWeatherService")]
    public interface IWeatherService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetAllWeather", ReplyAction="http://tempuri.org/IWeatherService/GetAllWeatherResponse")]
        System.Threading.Tasks.Task<WeeatherReference.WeatherServiceWeatherVM[]> GetAllWeatherAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWeatherByCity", ReplyAction="http://tempuri.org/IWeatherService/GetWeatherByCityResponse")]
        System.Threading.Tasks.Task<WeeatherReference.WeatherServiceWeatherVM[]> GetWeatherByCityAsync(int[] ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/AddWeatherByCity", ReplyAction="http://tempuri.org/IWeatherService/AddWeatherByCityResponse")]
        System.Threading.Tasks.Task<bool> AddWeatherByCityAsync(WeeatherReference.City c);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface IWeatherServiceChannel : WeeatherReference.IWeatherService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class WeatherServiceClient : System.ServiceModel.ClientBase<WeeatherReference.IWeatherService>, WeeatherReference.IWeatherService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WeatherServiceClient() : 
                base(WeatherServiceClient.GetDefaultBinding(), WeatherServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IWeatherService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WeatherServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(WeatherServiceClient.GetBindingForEndpoint(endpointConfiguration), WeatherServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WeatherServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WeatherServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WeatherServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WeatherServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WeatherServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<WeeatherReference.WeatherServiceWeatherVM[]> GetAllWeatherAsync()
        {
            return base.Channel.GetAllWeatherAsync();
        }
        
        public System.Threading.Tasks.Task<WeeatherReference.WeatherServiceWeatherVM[]> GetWeatherByCityAsync(int[] ids)
        {
            return base.Channel.GetWeatherByCityAsync(ids);
        }
        
        public System.Threading.Tasks.Task<bool> AddWeatherByCityAsync(WeeatherReference.City c)
        {
            return base.Channel.AddWeatherByCityAsync(c);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWeatherService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWeatherService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:60746/WeatherService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return WeatherServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IWeatherService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return WeatherServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IWeatherService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IWeatherService,
        }
    }
}
